import Head from 'next/head'
import styles from './signup.module.css'
import { useState } from 'react';
import { useRouter } from 'next/router';
import axios from 'axios';
import { useForm } from 'react-hook-form';

const Signup = () => {

    const router = useRouter();
    const [register_id, setId] = useState('');
    const [name, setName] = useState('');
    const [name_kana, setNamekana] = useState('');
    const [phone_number, setPhonenumber] = useState('');
    const [email_address, setEmail_address] = useState('');
    const [password, setPassword] = useState('');
    const [password_confirmation, setPasswordConfirm] = useState('');

    const { register, handleSubmit, formState: { errors }, getValues,} = useForm();

    const [registerInput, setRegister] = useState({
        register_id: '',
        email: '',
        error_list: [],
    });

    const fetchData = async () => {
        try {
            const formData = {
                register_id,
                name,
                name_kana,
                phone_number,
                email_address,
                password,
                password_confirmation,
            };
            const response = await axios.post("https://jsonplaceholder.typicode.com/posts/", formData);
            
            router.push('/login');
            console.log('Registration successful!', response.data);
        } catch (error) {
            setRegister({...registerInput, error_list: res.data.validation_errors});
            console.error('Registration failed:', error);
        }
    };
    
    return (
        <div className={styles.container}>
            <Head>
                <title>Signup</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className={styles.main}>
                <div className={styles.title}>
                    <div className={styles.a}>
                        <h2>SIGN UP</h2>
                    </div>
                    <div className={styles.b}>
                        <p>管理者情報登録</p>
                    </div>
                </div>
                <div className={styles.form}>
                    <div className={styles.formtitle}>
                        <p>管理者情報</p>
                    </div>
                    <form onSubmit={handleSubmit(fetchData)} >
                        <div className={styles.formData}>
                            <div>
                                <p>管理企業ID</p>
                                <input
                                type="text"
                                value={register_id}
                                {...register('register_id',  {
                                    required: '入力が必須の項目です。',
                                })}
                                onChange={(e) => setId(e.target.value)}
                                />
                                {errors.register_id && <div className={styles.errors}>{errors.register_id?.message}</div>}
                                <span>{registerInput.error_list.register_id}</span>
                            </div>
                            <div>
                                <p>氏名</p>
                                <input
                                type="text"
                                value={name}
                                {...register('name', {
                                    required: '入力が必須の項目です。',
                                })}
                                onChange={(e) => setName(e.target.value)}
                                />
                                {errors.name && <div className={styles.errors}>{errors.name?.message}</div>}
                            </div>
                            <div>
                                <p>氏名(カナ)</p>
                                <input
                                type="text"
                                value={name_kana}
                                {...register('name_kana', {
                                    required: '入力が必須の項目です。',
                                })}
                                onChange={(e) => setNamekana(e.target.value)}
                                />
                                {errors.name_kana && <div className={styles.errors}>{errors.name_kana?.message}</div>}
                            </div>
                            <div>
                                <p>携帯電話番号</p>
                                <input
                                type="text"
                                value={phone_number}
                                {...register('phone_number', {
                                    required: '入力が必須の項目です。',
                                    pattern: {
                                        value: /^0\d{9,10}$/,
                                        message: '入力形式が電話番号ではありません。',
                                    }
                                    })}
                                onChange={(e) => setPhonenumber(e.target.value)}
                                />
                                {
                                    errors.phone_number?.type === 'required' && <div className={styles.errors}>{errors.phone_number?.message}</div>
                                }
                                {
                                    errors.phone_number?.type ==='pattern' && <div className={styles.errors}>{errors.phone_number?.message}</div>
                                }
                            </div>
                            <div>
                                <p>メールアドレス</p>
                                <input
                                type="text"
                                value={email_address}
                                {...register('email_address', { 
                                    required:  '入力が必須の項目です。',
                                    pattern: {
                                        value: /^[\w\-._]+@[\w\-._]+\.[A-Za-z]+/,
                                        message: '入力形式がメールアドレスではありません。',
                                    }
                                })}
                                onChange={(e) => setEmail_address(e.target.value)}
                                />
                                {   
                                    errors.email_address?.type === 'required' && <div className={styles.errors}>{errors.email_address?.message}</div>
                                }
                                {
                                    errors.email_address?.type === 'pattern' && <div className={styles.errors}>{errors.email_address?.message}</div>
                                }
                                <span>{registerInput.error_list.email}</span>
                            </div>
                            <div>
                                <p>パスワード[8桁以上]</p>
                                <input
                                type="password"
                                value={password}
                                {...register('password', {
                                    required: '入力が必須の項目です。',
                                    minLength: {
                                        value: 8,
                                        message: '8文字以上入力してください。',
                                    },
                                })}
                                onChange={(e) => setPassword(e.target.value)}
                                />
                                {
                                    errors.password?.type === 'required' && <div className={styles.errors}>{errors.password?.message}</div>
                                }
                                {
                                    errors.password?.type === 'minLength' && <div className={styles.errors}>{errors.password?.message}</div>
                                }
                            </div>
                            <div>
                                <p>パスワード[確認]</p>
                                <div>
                                <input
                                type="password"
                                value={password_confirmation}
                                {...register('password_confirmation', {
                                    required: '確認のためパスワードを再入力してください。',
                                    minLength: {
                                        value: 8,
                                        message: '8文字以上入力してください。',
                                    },
                                    validate: (value) => {
                                        return (
                                            value === getValues("password") || "パスワードが一致しません"
                                        );
                                    }
                                })}
                                onChange={(e) => setPasswordConfirm(e.target.value)}
                                />
                                {
                                    errors.password_confirmation?.type === 'required' && <div className={styles.errors}>{errors.password_confirmation?.message}</div>
                                }
                                {
                                    errors.password_confirmation?.type === 'minLength' && <div className={styles.errors}>{errors.password_confirmation?.message}</div>
                                }
                                {
                                    errors.password_confirmation?.type === 'validate' && <div className={styles.errors}>{errors.password_confirmation?.message}</div>
                                }
                            </div>
                            </div>
                        </div>
                        <div>
                            <button type="submit" className={styles.button}>
                                登録する
                            </button>
                        </div>
                    </form>
                </div>
            </main>
        </div>
    )
}

export default Signup